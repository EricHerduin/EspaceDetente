{"ast":null,"code":"var _jsxFileName = \"/Users/ericherduin/SiteWeb/espaceDetente/espace_detente/src/libs/divtext.jsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TextWithDiv(props) {\n  const text = props.text;\n  const maxLength = props.maxLength;\n  const slicedTexts = [];\n\n  // Découper le texte au dernier point avant la longueur maximale\n  let startIndex = 0;\n  while (startIndex < text.length) {\n    let endIndex = startIndex + maxLength;\n    if (endIndex >= text.length) {\n      endIndex = text.length;\n    } else {\n      endIndex = text.lastIndexOf(\".\", endIndex);\n      if (endIndex === -1) {\n        endIndex = startIndex + maxLength;\n      }\n    }\n    slicedTexts.pull(text.slice(startIndex, endIndex));\n    startIndex = endIndex + 1;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: slicedTexts.map((slicedText, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: slicedText\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n_c = TextWithDiv;\nexport default TextWithDiv;\nvar _c;\n$RefreshReg$(_c, \"TextWithDiv\");","map":{"version":3,"names":["React","TextWithDiv","props","text","maxLength","slicedTexts","startIndex","length","endIndex","lastIndexOf","pull","slice","map","slicedText","index"],"sources":["/Users/ericherduin/SiteWeb/espaceDetente/espace_detente/src/libs/divtext.jsx"],"sourcesContent":["import React from \"react\";\n\nfunction TextWithDiv(props) {\n  const text = props.text;\n  const maxLength = props.maxLength;\n  const slicedTexts = [];\n\n  // Découper le texte au dernier point avant la longueur maximale\n  let startIndex = 0;\n  while (startIndex < text.length) {\n    let endIndex = startIndex + maxLength;\n    if (endIndex >= text.length) {\n      endIndex = text.length;\n    } else {\n      endIndex = text.lastIndexOf(\".\", endIndex);\n      if (endIndex === -1) {\n        endIndex = startIndex + maxLength;\n      }\n    }\n    slicedTexts.pull(text.slice(startIndex, endIndex));\n    startIndex = endIndex + 1;\n  }\n\n  return (\n    <div>\n      {slicedTexts.map((slicedText, index) => (\n        <div key={index}>{slicedText}</div>\n      ))}\n    </div>\n  );\n}\n\nexport default TextWithDiv;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC;AAE1B,SAASC,WAAW,CAACC,KAAK,EAAE;EAC1B,MAAMC,IAAI,GAAGD,KAAK,CAACC,IAAI;EACvB,MAAMC,SAAS,GAAGF,KAAK,CAACE,SAAS;EACjC,MAAMC,WAAW,GAAG,EAAE;;EAEtB;EACA,IAAIC,UAAU,GAAG,CAAC;EAClB,OAAOA,UAAU,GAAGH,IAAI,CAACI,MAAM,EAAE;IAC/B,IAAIC,QAAQ,GAAGF,UAAU,GAAGF,SAAS;IACrC,IAAII,QAAQ,IAAIL,IAAI,CAACI,MAAM,EAAE;MAC3BC,QAAQ,GAAGL,IAAI,CAACI,MAAM;IACxB,CAAC,MAAM;MACLC,QAAQ,GAAGL,IAAI,CAACM,WAAW,CAAC,GAAG,EAAED,QAAQ,CAAC;MAC1C,IAAIA,QAAQ,KAAK,CAAC,CAAC,EAAE;QACnBA,QAAQ,GAAGF,UAAU,GAAGF,SAAS;MACnC;IACF;IACAC,WAAW,CAACK,IAAI,CAACP,IAAI,CAACQ,KAAK,CAACL,UAAU,EAAEE,QAAQ,CAAC,CAAC;IAClDF,UAAU,GAAGE,QAAQ,GAAG,CAAC;EAC3B;EAEA,oBACE;IAAA,UACGH,WAAW,CAACO,GAAG,CAAC,CAACC,UAAU,EAAEC,KAAK,kBACjC;MAAA,UAAkBD;IAAU,GAAlBC,KAAK;MAAA;MAAA;MAAA;IAAA,QAChB;EAAC;IAAA;IAAA;IAAA;EAAA,QACE;AAEV;AAAC,KA5BQb,WAAW;AA8BpB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}